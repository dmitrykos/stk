/*
 * SuperTinyKernel: Minimalistic thread scheduling kernel for Embedded systems.
 *
 * Source: http://github.com/dmitrykos/stk
 *
 * Copyright (c) 2022 Dmitry Kostjucenko <dmitry.kostjucenko@gmail.com>
 * License: MIT License, see LICENSE for a full text.
 */

#ifndef STKTEST_H_
#define STKTEST_H_

#include <stdio.h>
#include <exception>

// lib: cpputest
#include <CppUTest/TestHarness.h>

//! __stk_relax_cpu handler.
extern void (* g_RelaxCpuHandler)();

//! __stk_relax_cpu interceptor.
static inline void __stktest_relax_cpu()
{
    if (g_RelaxCpuHandler != NULL)
        g_RelaxCpuHandler();
}

// lib: stk
#define _STK_UNDER_TEST
#define __stk_relax_cpu __stktest_relax_cpu
#include <stk_config.h>
#include <stk.h>
#include <arch/stk_arch_common.h>

#include "stktest_context.h"

namespace stk {

/*! \namespace stk::test
    \brief     Namespace of the test inventory.
 */
namespace test {

/*! \class TestAssertPassed
    \brief Throwable class for catching assertions from _STK_ASSERT_IMPL().
*/
struct TestAssertPassed : public std::exception
{
    const char *what() const noexcept { return "STK test suite exception (TestAssertPassed) thrown!"; }
};

/*! \class PlatformTestMock
    \brief IPlatform mock.
*/
class PlatformTestMock : public IPlatform
{
public:
    struct StackInfo
    {
        Stack        *stack;
        IStackMemory *memory;
        ITask        *task;
    };

    explicit PlatformTestMock()
    {
        m_event_handler     = NULL;
        m_started           = false;
        m_switch_to_next_nr = 0;
        m_first_task_Start  = NULL;
        m_exit_trap         = NULL;
        m_fail_InitStack    = 0;
        m_resolution        = 0;
        m_access_mode       = ACCESS_USER;
        m_context_switch_nr = 0;
        m_stack_idle        = NULL;
        m_stack_active      = NULL;
    }

    virtual ~PlatformTestMock()
    { }

    void Start(IEventHandler *event_handler, uint32_t resolution_us, IKernelTask *first_task, Stack *exit_trap)
    {
        m_event_handler    = event_handler;
        m_started          = true;
        m_resolution       = resolution_us;
        m_first_task_Start = first_task;
        m_exit_trap        = exit_trap;
    }

    void Stop()
    {
    	m_started = false;
    }

    bool InitStack(EStackType type, Stack *stack, IStackMemory *stack_memory, ITask *user_task)
    {
        if (m_fail_InitStack)
            return false;

        // if NULL then it is Exit trap is being initialized
        m_stack_info[type].stack  = stack;
        m_stack_info[type].memory = stack_memory;
        m_stack_info[type].task   = user_task;

        // required to pass assertion checks when switching tasks
        PlatformContext::InitStackMemory(stack_memory);

        stack->SP = (size_t)stack_memory->GetStack();
        return true;
    }

    void SwitchContext()
    {
        ++m_context_switch_nr;
    }

    int32_t GetTickResolution() const
    {
        return m_resolution;
    }

    void SetAccessMode(EAccessMode mode)
    {
        m_access_mode = mode;
    }

    void SwitchToNext()
    {
        m_event_handler->OnTaskSwitch(m_stack_active->SP);
        ++m_switch_to_next_nr;
    }

    void SleepTicks(uint32_t ticks)
    {
        m_event_handler->OnTaskSleep(m_stack_active->SP, ticks);
    }

    // Events generated by test cases:

    void EventStart()
    {
        m_event_handler->OnStart();
        m_stack_active = m_stack_info[STACK_USER_TASK].stack;
    }

    void EventSysTick()
    {
        m_event_handler->OnSysTick(&m_stack_idle, &m_stack_active);
    }

    void EventTaskExit(Stack *stack)
    {
        m_event_handler->OnTaskExit(stack);
    }

    void EventTaskSwitch(size_t caller_SP)
    {
        m_event_handler->OnTaskSwitch(caller_SP);
    }

    void EventTaskSleep(size_t caller_SP, uint32_t sleep_ticks)
    {
        m_event_handler->OnTaskSleep(caller_SP, sleep_ticks);
    }

    IKernelTask   *m_first_task_Start;
    Stack         *m_exit_trap;
    bool           m_fail_InitStack;
    int32_t        m_resolution;
    EAccessMode    m_access_mode;
    uint32_t       m_context_switch_nr;
    bool           m_started;
    uint32_t       m_switch_to_next_nr;
    Stack         *m_stack_idle;
    Stack         *m_stack_active;
    StackInfo      m_stack_info[STACK_EXIT_TRAP + 1];

protected:
    IEventHandler *m_event_handler;
};

/*! \class KernelServiceMock
    \brief IKernelService mock.
*/
class KernelServiceMock : public IKernelService
{
public:
    KernelServiceMock()
    {
        m_inc_ticks      = false;
        m_switch_to_next = false;
        m_ticks          = 0;
        m_resolution     = 0;
    }
    virtual ~KernelServiceMock()
    { }

    int64_t GetTicks() const
    {
        if (m_inc_ticks)
            const_cast<int64_t &>(m_ticks) = m_ticks + 1;

        return m_ticks;
    }

    int32_t GetTickResolution() const
    {
        return m_resolution;
    }

    void Sleep(uint32_t sleep_ms)
    {

    }

    void SwitchToNext()
    {
        m_switch_to_next = true;
    }

    bool    m_inc_ticks;
    bool    m_switch_to_next;
    int64_t m_ticks;
    int32_t m_resolution;
};

/*! \class TaskMock
    \brief Task mock.
    \note  QEMU allocates small stack for the function, therefore stack size is limited to STACK_SIZE_MIN for tests to pass (256 was causing a hard fault).
*/
template <EAccessMode _AccessMode>
class TaskMock : public Task<STACK_SIZE_MIN, _AccessMode>
{
public:
    RunFuncType GetFunc() { return &Run; }
    void *GetFuncUserData() { return this; }

private:
    static void Run(void *user_data)
    {
        ((TaskMock *)user_data)->RunInner();
    }

    void RunInner() {}
};

} // namespace test
} // namespace stk

#endif /* STKTEST_H_ */
